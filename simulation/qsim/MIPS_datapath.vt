// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2023 10:37:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register_vlg_sample_tst(
	RR1,
	RR2,
	RegWrite,
	WD,
	WR,
	clk,
	sampler_tx
);
input [4:0] RR1;
input [4:0] RR2;
input  RegWrite;
input [31:0] WD;
input [4:0] WR;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(RR1 or RR2 or RegWrite or WD or WR or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Register_vlg_check_tst (
	RD1,
	RD2,
	sampler_rx
);
input [31:0] RD1;
input [31:0] RD2;
input sampler_rx;

reg [31:0] RD1_expected;
reg [31:0] RD2_expected;

reg [31:0] RD1_prev;
reg [31:0] RD2_prev;

reg [31:0] RD1_expected_prev;
reg [31:0] RD2_expected_prev;

reg [31:0] last_RD1_exp;
reg [31:0] last_RD2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	RD1_prev = RD1;
	RD2_prev = RD2;
end

// update expected /o prevs

always @(trigger)
begin
	RD1_expected_prev = RD1_expected;
	RD2_expected_prev = RD2_expected;
end


// expected RD1[ 31 ]
initial
begin
	RD1_expected[31] = 1'bX;
end 
// expected RD1[ 30 ]
initial
begin
	RD1_expected[30] = 1'bX;
end 
// expected RD1[ 29 ]
initial
begin
	RD1_expected[29] = 1'bX;
end 
// expected RD1[ 28 ]
initial
begin
	RD1_expected[28] = 1'bX;
end 
// expected RD1[ 27 ]
initial
begin
	RD1_expected[27] = 1'bX;
end 
// expected RD1[ 26 ]
initial
begin
	RD1_expected[26] = 1'bX;
end 
// expected RD1[ 25 ]
initial
begin
	RD1_expected[25] = 1'bX;
end 
// expected RD1[ 24 ]
initial
begin
	RD1_expected[24] = 1'bX;
end 
// expected RD1[ 23 ]
initial
begin
	RD1_expected[23] = 1'bX;
end 
// expected RD1[ 22 ]
initial
begin
	RD1_expected[22] = 1'bX;
end 
// expected RD1[ 21 ]
initial
begin
	RD1_expected[21] = 1'bX;
end 
// expected RD1[ 20 ]
initial
begin
	RD1_expected[20] = 1'bX;
end 
// expected RD1[ 19 ]
initial
begin
	RD1_expected[19] = 1'bX;
end 
// expected RD1[ 18 ]
initial
begin
	RD1_expected[18] = 1'bX;
end 
// expected RD1[ 17 ]
initial
begin
	RD1_expected[17] = 1'bX;
end 
// expected RD1[ 16 ]
initial
begin
	RD1_expected[16] = 1'bX;
end 
// expected RD1[ 15 ]
initial
begin
	RD1_expected[15] = 1'bX;
end 
// expected RD1[ 14 ]
initial
begin
	RD1_expected[14] = 1'bX;
end 
// expected RD1[ 13 ]
initial
begin
	RD1_expected[13] = 1'bX;
end 
// expected RD1[ 12 ]
initial
begin
	RD1_expected[12] = 1'bX;
end 
// expected RD1[ 11 ]
initial
begin
	RD1_expected[11] = 1'bX;
end 
// expected RD1[ 10 ]
initial
begin
	RD1_expected[10] = 1'bX;
end 
// expected RD1[ 9 ]
initial
begin
	RD1_expected[9] = 1'bX;
end 
// expected RD1[ 8 ]
initial
begin
	RD1_expected[8] = 1'bX;
end 
// expected RD1[ 7 ]
initial
begin
	RD1_expected[7] = 1'bX;
end 
// expected RD1[ 6 ]
initial
begin
	RD1_expected[6] = 1'bX;
end 
// expected RD1[ 5 ]
initial
begin
	RD1_expected[5] = 1'bX;
end 
// expected RD1[ 4 ]
initial
begin
	RD1_expected[4] = 1'bX;
end 
// expected RD1[ 3 ]
initial
begin
	RD1_expected[3] = 1'bX;
end 
// expected RD1[ 2 ]
initial
begin
	RD1_expected[2] = 1'bX;
end 
// expected RD1[ 1 ]
initial
begin
	RD1_expected[1] = 1'bX;
end 
// expected RD1[ 0 ]
initial
begin
	RD1_expected[0] = 1'bX;
end 
// expected RD2[ 31 ]
initial
begin
	RD2_expected[31] = 1'bX;
end 
// expected RD2[ 30 ]
initial
begin
	RD2_expected[30] = 1'bX;
end 
// expected RD2[ 29 ]
initial
begin
	RD2_expected[29] = 1'bX;
end 
// expected RD2[ 28 ]
initial
begin
	RD2_expected[28] = 1'bX;
end 
// expected RD2[ 27 ]
initial
begin
	RD2_expected[27] = 1'bX;
end 
// expected RD2[ 26 ]
initial
begin
	RD2_expected[26] = 1'bX;
end 
// expected RD2[ 25 ]
initial
begin
	RD2_expected[25] = 1'bX;
end 
// expected RD2[ 24 ]
initial
begin
	RD2_expected[24] = 1'bX;
end 
// expected RD2[ 23 ]
initial
begin
	RD2_expected[23] = 1'bX;
end 
// expected RD2[ 22 ]
initial
begin
	RD2_expected[22] = 1'bX;
end 
// expected RD2[ 21 ]
initial
begin
	RD2_expected[21] = 1'bX;
end 
// expected RD2[ 20 ]
initial
begin
	RD2_expected[20] = 1'bX;
end 
// expected RD2[ 19 ]
initial
begin
	RD2_expected[19] = 1'bX;
end 
// expected RD2[ 18 ]
initial
begin
	RD2_expected[18] = 1'bX;
end 
// expected RD2[ 17 ]
initial
begin
	RD2_expected[17] = 1'bX;
end 
// expected RD2[ 16 ]
initial
begin
	RD2_expected[16] = 1'bX;
end 
// expected RD2[ 15 ]
initial
begin
	RD2_expected[15] = 1'bX;
end 
// expected RD2[ 14 ]
initial
begin
	RD2_expected[14] = 1'bX;
end 
// expected RD2[ 13 ]
initial
begin
	RD2_expected[13] = 1'bX;
end 
// expected RD2[ 12 ]
initial
begin
	RD2_expected[12] = 1'bX;
end 
// expected RD2[ 11 ]
initial
begin
	RD2_expected[11] = 1'bX;
end 
// expected RD2[ 10 ]
initial
begin
	RD2_expected[10] = 1'bX;
end 
// expected RD2[ 9 ]
initial
begin
	RD2_expected[9] = 1'bX;
end 
// expected RD2[ 8 ]
initial
begin
	RD2_expected[8] = 1'bX;
end 
// expected RD2[ 7 ]
initial
begin
	RD2_expected[7] = 1'bX;
end 
// expected RD2[ 6 ]
initial
begin
	RD2_expected[6] = 1'bX;
end 
// expected RD2[ 5 ]
initial
begin
	RD2_expected[5] = 1'bX;
end 
// expected RD2[ 4 ]
initial
begin
	RD2_expected[4] = 1'bX;
end 
// expected RD2[ 3 ]
initial
begin
	RD2_expected[3] = 1'bX;
end 
// expected RD2[ 2 ]
initial
begin
	RD2_expected[2] = 1'bX;
end 
// expected RD2[ 1 ]
initial
begin
	RD2_expected[1] = 1'bX;
end 
// expected RD2[ 0 ]
initial
begin
	RD2_expected[0] = 1'bX;
end 
// generate trigger
always @(RD1_expected or RD1 or RD2_expected or RD2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RD1 = %b | expected RD2 = %b | ",RD1_expected_prev,RD2_expected_prev);
	$display("| real RD1 = %b | real RD2 = %b | ",RD1_prev,RD2_prev);
`endif
	if (
		( RD1_expected_prev[0] !== 1'bx ) && ( RD1_prev[0] !== RD1_expected_prev[0] )
		&& ((RD1_expected_prev[0] !== last_RD1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[0] = RD1_expected_prev[0];
	end
	if (
		( RD1_expected_prev[1] !== 1'bx ) && ( RD1_prev[1] !== RD1_expected_prev[1] )
		&& ((RD1_expected_prev[1] !== last_RD1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[1] = RD1_expected_prev[1];
	end
	if (
		( RD1_expected_prev[2] !== 1'bx ) && ( RD1_prev[2] !== RD1_expected_prev[2] )
		&& ((RD1_expected_prev[2] !== last_RD1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[2] = RD1_expected_prev[2];
	end
	if (
		( RD1_expected_prev[3] !== 1'bx ) && ( RD1_prev[3] !== RD1_expected_prev[3] )
		&& ((RD1_expected_prev[3] !== last_RD1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[3] = RD1_expected_prev[3];
	end
	if (
		( RD1_expected_prev[4] !== 1'bx ) && ( RD1_prev[4] !== RD1_expected_prev[4] )
		&& ((RD1_expected_prev[4] !== last_RD1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[4] = RD1_expected_prev[4];
	end
	if (
		( RD1_expected_prev[5] !== 1'bx ) && ( RD1_prev[5] !== RD1_expected_prev[5] )
		&& ((RD1_expected_prev[5] !== last_RD1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[5] = RD1_expected_prev[5];
	end
	if (
		( RD1_expected_prev[6] !== 1'bx ) && ( RD1_prev[6] !== RD1_expected_prev[6] )
		&& ((RD1_expected_prev[6] !== last_RD1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[6] = RD1_expected_prev[6];
	end
	if (
		( RD1_expected_prev[7] !== 1'bx ) && ( RD1_prev[7] !== RD1_expected_prev[7] )
		&& ((RD1_expected_prev[7] !== last_RD1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[7] = RD1_expected_prev[7];
	end
	if (
		( RD1_expected_prev[8] !== 1'bx ) && ( RD1_prev[8] !== RD1_expected_prev[8] )
		&& ((RD1_expected_prev[8] !== last_RD1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[8] = RD1_expected_prev[8];
	end
	if (
		( RD1_expected_prev[9] !== 1'bx ) && ( RD1_prev[9] !== RD1_expected_prev[9] )
		&& ((RD1_expected_prev[9] !== last_RD1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[9] = RD1_expected_prev[9];
	end
	if (
		( RD1_expected_prev[10] !== 1'bx ) && ( RD1_prev[10] !== RD1_expected_prev[10] )
		&& ((RD1_expected_prev[10] !== last_RD1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[10] = RD1_expected_prev[10];
	end
	if (
		( RD1_expected_prev[11] !== 1'bx ) && ( RD1_prev[11] !== RD1_expected_prev[11] )
		&& ((RD1_expected_prev[11] !== last_RD1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[11] = RD1_expected_prev[11];
	end
	if (
		( RD1_expected_prev[12] !== 1'bx ) && ( RD1_prev[12] !== RD1_expected_prev[12] )
		&& ((RD1_expected_prev[12] !== last_RD1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[12] = RD1_expected_prev[12];
	end
	if (
		( RD1_expected_prev[13] !== 1'bx ) && ( RD1_prev[13] !== RD1_expected_prev[13] )
		&& ((RD1_expected_prev[13] !== last_RD1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[13] = RD1_expected_prev[13];
	end
	if (
		( RD1_expected_prev[14] !== 1'bx ) && ( RD1_prev[14] !== RD1_expected_prev[14] )
		&& ((RD1_expected_prev[14] !== last_RD1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[14] = RD1_expected_prev[14];
	end
	if (
		( RD1_expected_prev[15] !== 1'bx ) && ( RD1_prev[15] !== RD1_expected_prev[15] )
		&& ((RD1_expected_prev[15] !== last_RD1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[15] = RD1_expected_prev[15];
	end
	if (
		( RD1_expected_prev[16] !== 1'bx ) && ( RD1_prev[16] !== RD1_expected_prev[16] )
		&& ((RD1_expected_prev[16] !== last_RD1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[16] = RD1_expected_prev[16];
	end
	if (
		( RD1_expected_prev[17] !== 1'bx ) && ( RD1_prev[17] !== RD1_expected_prev[17] )
		&& ((RD1_expected_prev[17] !== last_RD1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[17] = RD1_expected_prev[17];
	end
	if (
		( RD1_expected_prev[18] !== 1'bx ) && ( RD1_prev[18] !== RD1_expected_prev[18] )
		&& ((RD1_expected_prev[18] !== last_RD1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[18] = RD1_expected_prev[18];
	end
	if (
		( RD1_expected_prev[19] !== 1'bx ) && ( RD1_prev[19] !== RD1_expected_prev[19] )
		&& ((RD1_expected_prev[19] !== last_RD1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[19] = RD1_expected_prev[19];
	end
	if (
		( RD1_expected_prev[20] !== 1'bx ) && ( RD1_prev[20] !== RD1_expected_prev[20] )
		&& ((RD1_expected_prev[20] !== last_RD1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[20] = RD1_expected_prev[20];
	end
	if (
		( RD1_expected_prev[21] !== 1'bx ) && ( RD1_prev[21] !== RD1_expected_prev[21] )
		&& ((RD1_expected_prev[21] !== last_RD1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[21] = RD1_expected_prev[21];
	end
	if (
		( RD1_expected_prev[22] !== 1'bx ) && ( RD1_prev[22] !== RD1_expected_prev[22] )
		&& ((RD1_expected_prev[22] !== last_RD1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[22] = RD1_expected_prev[22];
	end
	if (
		( RD1_expected_prev[23] !== 1'bx ) && ( RD1_prev[23] !== RD1_expected_prev[23] )
		&& ((RD1_expected_prev[23] !== last_RD1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[23] = RD1_expected_prev[23];
	end
	if (
		( RD1_expected_prev[24] !== 1'bx ) && ( RD1_prev[24] !== RD1_expected_prev[24] )
		&& ((RD1_expected_prev[24] !== last_RD1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[24] = RD1_expected_prev[24];
	end
	if (
		( RD1_expected_prev[25] !== 1'bx ) && ( RD1_prev[25] !== RD1_expected_prev[25] )
		&& ((RD1_expected_prev[25] !== last_RD1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[25] = RD1_expected_prev[25];
	end
	if (
		( RD1_expected_prev[26] !== 1'bx ) && ( RD1_prev[26] !== RD1_expected_prev[26] )
		&& ((RD1_expected_prev[26] !== last_RD1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[26] = RD1_expected_prev[26];
	end
	if (
		( RD1_expected_prev[27] !== 1'bx ) && ( RD1_prev[27] !== RD1_expected_prev[27] )
		&& ((RD1_expected_prev[27] !== last_RD1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[27] = RD1_expected_prev[27];
	end
	if (
		( RD1_expected_prev[28] !== 1'bx ) && ( RD1_prev[28] !== RD1_expected_prev[28] )
		&& ((RD1_expected_prev[28] !== last_RD1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[28] = RD1_expected_prev[28];
	end
	if (
		( RD1_expected_prev[29] !== 1'bx ) && ( RD1_prev[29] !== RD1_expected_prev[29] )
		&& ((RD1_expected_prev[29] !== last_RD1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[29] = RD1_expected_prev[29];
	end
	if (
		( RD1_expected_prev[30] !== 1'bx ) && ( RD1_prev[30] !== RD1_expected_prev[30] )
		&& ((RD1_expected_prev[30] !== last_RD1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[30] = RD1_expected_prev[30];
	end
	if (
		( RD1_expected_prev[31] !== 1'bx ) && ( RD1_prev[31] !== RD1_expected_prev[31] )
		&& ((RD1_expected_prev[31] !== last_RD1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD1_expected_prev);
		$display ("     Real value = %b", RD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RD1_exp[31] = RD1_expected_prev[31];
	end
	if (
		( RD2_expected_prev[0] !== 1'bx ) && ( RD2_prev[0] !== RD2_expected_prev[0] )
		&& ((RD2_expected_prev[0] !== last_RD2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[0] = RD2_expected_prev[0];
	end
	if (
		( RD2_expected_prev[1] !== 1'bx ) && ( RD2_prev[1] !== RD2_expected_prev[1] )
		&& ((RD2_expected_prev[1] !== last_RD2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[1] = RD2_expected_prev[1];
	end
	if (
		( RD2_expected_prev[2] !== 1'bx ) && ( RD2_prev[2] !== RD2_expected_prev[2] )
		&& ((RD2_expected_prev[2] !== last_RD2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[2] = RD2_expected_prev[2];
	end
	if (
		( RD2_expected_prev[3] !== 1'bx ) && ( RD2_prev[3] !== RD2_expected_prev[3] )
		&& ((RD2_expected_prev[3] !== last_RD2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[3] = RD2_expected_prev[3];
	end
	if (
		( RD2_expected_prev[4] !== 1'bx ) && ( RD2_prev[4] !== RD2_expected_prev[4] )
		&& ((RD2_expected_prev[4] !== last_RD2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[4] = RD2_expected_prev[4];
	end
	if (
		( RD2_expected_prev[5] !== 1'bx ) && ( RD2_prev[5] !== RD2_expected_prev[5] )
		&& ((RD2_expected_prev[5] !== last_RD2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[5] = RD2_expected_prev[5];
	end
	if (
		( RD2_expected_prev[6] !== 1'bx ) && ( RD2_prev[6] !== RD2_expected_prev[6] )
		&& ((RD2_expected_prev[6] !== last_RD2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[6] = RD2_expected_prev[6];
	end
	if (
		( RD2_expected_prev[7] !== 1'bx ) && ( RD2_prev[7] !== RD2_expected_prev[7] )
		&& ((RD2_expected_prev[7] !== last_RD2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[7] = RD2_expected_prev[7];
	end
	if (
		( RD2_expected_prev[8] !== 1'bx ) && ( RD2_prev[8] !== RD2_expected_prev[8] )
		&& ((RD2_expected_prev[8] !== last_RD2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[8] = RD2_expected_prev[8];
	end
	if (
		( RD2_expected_prev[9] !== 1'bx ) && ( RD2_prev[9] !== RD2_expected_prev[9] )
		&& ((RD2_expected_prev[9] !== last_RD2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[9] = RD2_expected_prev[9];
	end
	if (
		( RD2_expected_prev[10] !== 1'bx ) && ( RD2_prev[10] !== RD2_expected_prev[10] )
		&& ((RD2_expected_prev[10] !== last_RD2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[10] = RD2_expected_prev[10];
	end
	if (
		( RD2_expected_prev[11] !== 1'bx ) && ( RD2_prev[11] !== RD2_expected_prev[11] )
		&& ((RD2_expected_prev[11] !== last_RD2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[11] = RD2_expected_prev[11];
	end
	if (
		( RD2_expected_prev[12] !== 1'bx ) && ( RD2_prev[12] !== RD2_expected_prev[12] )
		&& ((RD2_expected_prev[12] !== last_RD2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[12] = RD2_expected_prev[12];
	end
	if (
		( RD2_expected_prev[13] !== 1'bx ) && ( RD2_prev[13] !== RD2_expected_prev[13] )
		&& ((RD2_expected_prev[13] !== last_RD2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[13] = RD2_expected_prev[13];
	end
	if (
		( RD2_expected_prev[14] !== 1'bx ) && ( RD2_prev[14] !== RD2_expected_prev[14] )
		&& ((RD2_expected_prev[14] !== last_RD2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[14] = RD2_expected_prev[14];
	end
	if (
		( RD2_expected_prev[15] !== 1'bx ) && ( RD2_prev[15] !== RD2_expected_prev[15] )
		&& ((RD2_expected_prev[15] !== last_RD2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[15] = RD2_expected_prev[15];
	end
	if (
		( RD2_expected_prev[16] !== 1'bx ) && ( RD2_prev[16] !== RD2_expected_prev[16] )
		&& ((RD2_expected_prev[16] !== last_RD2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[16] = RD2_expected_prev[16];
	end
	if (
		( RD2_expected_prev[17] !== 1'bx ) && ( RD2_prev[17] !== RD2_expected_prev[17] )
		&& ((RD2_expected_prev[17] !== last_RD2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[17] = RD2_expected_prev[17];
	end
	if (
		( RD2_expected_prev[18] !== 1'bx ) && ( RD2_prev[18] !== RD2_expected_prev[18] )
		&& ((RD2_expected_prev[18] !== last_RD2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[18] = RD2_expected_prev[18];
	end
	if (
		( RD2_expected_prev[19] !== 1'bx ) && ( RD2_prev[19] !== RD2_expected_prev[19] )
		&& ((RD2_expected_prev[19] !== last_RD2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[19] = RD2_expected_prev[19];
	end
	if (
		( RD2_expected_prev[20] !== 1'bx ) && ( RD2_prev[20] !== RD2_expected_prev[20] )
		&& ((RD2_expected_prev[20] !== last_RD2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[20] = RD2_expected_prev[20];
	end
	if (
		( RD2_expected_prev[21] !== 1'bx ) && ( RD2_prev[21] !== RD2_expected_prev[21] )
		&& ((RD2_expected_prev[21] !== last_RD2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[21] = RD2_expected_prev[21];
	end
	if (
		( RD2_expected_prev[22] !== 1'bx ) && ( RD2_prev[22] !== RD2_expected_prev[22] )
		&& ((RD2_expected_prev[22] !== last_RD2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[22] = RD2_expected_prev[22];
	end
	if (
		( RD2_expected_prev[23] !== 1'bx ) && ( RD2_prev[23] !== RD2_expected_prev[23] )
		&& ((RD2_expected_prev[23] !== last_RD2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[23] = RD2_expected_prev[23];
	end
	if (
		( RD2_expected_prev[24] !== 1'bx ) && ( RD2_prev[24] !== RD2_expected_prev[24] )
		&& ((RD2_expected_prev[24] !== last_RD2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[24] = RD2_expected_prev[24];
	end
	if (
		( RD2_expected_prev[25] !== 1'bx ) && ( RD2_prev[25] !== RD2_expected_prev[25] )
		&& ((RD2_expected_prev[25] !== last_RD2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[25] = RD2_expected_prev[25];
	end
	if (
		( RD2_expected_prev[26] !== 1'bx ) && ( RD2_prev[26] !== RD2_expected_prev[26] )
		&& ((RD2_expected_prev[26] !== last_RD2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[26] = RD2_expected_prev[26];
	end
	if (
		( RD2_expected_prev[27] !== 1'bx ) && ( RD2_prev[27] !== RD2_expected_prev[27] )
		&& ((RD2_expected_prev[27] !== last_RD2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[27] = RD2_expected_prev[27];
	end
	if (
		( RD2_expected_prev[28] !== 1'bx ) && ( RD2_prev[28] !== RD2_expected_prev[28] )
		&& ((RD2_expected_prev[28] !== last_RD2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[28] = RD2_expected_prev[28];
	end
	if (
		( RD2_expected_prev[29] !== 1'bx ) && ( RD2_prev[29] !== RD2_expected_prev[29] )
		&& ((RD2_expected_prev[29] !== last_RD2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[29] = RD2_expected_prev[29];
	end
	if (
		( RD2_expected_prev[30] !== 1'bx ) && ( RD2_prev[30] !== RD2_expected_prev[30] )
		&& ((RD2_expected_prev[30] !== last_RD2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[30] = RD2_expected_prev[30];
	end
	if (
		( RD2_expected_prev[31] !== 1'bx ) && ( RD2_prev[31] !== RD2_expected_prev[31] )
		&& ((RD2_expected_prev[31] !== last_RD2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD2_expected_prev);
		$display ("     Real value = %b", RD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RD2_exp[31] = RD2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] RR1;
reg [4:0] RR2;
reg RegWrite;
reg [31:0] WD;
reg [4:0] WR;
reg clk;
// wires                                               
wire [31:0] RD1;
wire [31:0] RD2;

wire sampler;                             

// assign statements (if any)                          
Register i1 (
// port map - connection between master ports and signals/registers   
	.RD1(RD1),
	.RD2(RD2),
	.RR1(RR1),
	.RR2(RR2),
	.RegWrite(RegWrite),
	.WD(WD),
	.WR(WR),
	.clk(clk)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// RegWrite
initial
begin
	RegWrite = 1'b1;
	RegWrite = #110000 1'b0;
end 
// RR1[ 4 ]
initial
begin
	RR1[4] = 1'bX;
	RR1[4] = #10000 1'b0;
	RR1[4] = #30000 1'bX;
	RR1[4] = #80000 1'b0;
	RR1[4] = #120000 1'b1;
	RR1[4] = #50000 1'b0;
	RR1[4] = #160000 1'b1;
	RR1[4] = #160000 1'b0;
	RR1[4] = #160000 1'b1;
	RR1[4] = #160000 1'b0;
end 
// RR1[ 3 ]
initial
begin
	RR1[3] = 1'bX;
	RR1[3] = #10000 1'b0;
	RR1[3] = #30000 1'bX;
	RR1[3] = #80000 1'b0;
	RR1[3] = #40000 1'b1;
	RR1[3] = #80000 1'b0;
	RR1[3] = #10000 1'b1;
	RR1[3] = #40000 1'b0;
	# 80000;
	repeat(3)
	begin
		RR1[3] = 1'b1;
		RR1[3] = #80000 1'b0;
		# 80000;
	end
	RR1[3] = 1'b1;
	RR1[3] = #80000 1'b0;
end 
// RR1[ 2 ]
initial
begin
	RR1[2] = 1'bX;
	RR1[2] = #10000 1'b0;
	RR1[2] = #30000 1'bX;
	RR1[2] = #80000 1'b1;
	RR1[2] = #40000 1'b0;
	RR1[2] = #40000 1'b1;
	RR1[2] = #40000 1'b0;
	RR1[2] = #10000 1'b1;
	RR1[2] = #40000 1'b0;
	# 40000;
	repeat(8)
	begin
		RR1[2] = 1'b1;
		RR1[2] = #40000 1'b0;
		# 40000;
	end
	RR1[2] = 1'b1;
end 
// RR1[ 1 ]
initial
begin
	RR1[1] = 1'bX;
	RR1[1] = #10000 1'b0;
	RR1[1] = #20000 1'b1;
	RR1[1] = #10000 1'bX;
	RR1[1] = #80000 1'b0;
	RR1[1] = #20000 1'b1;
	# 20000;
	repeat(2)
	begin
		RR1[1] = 1'b0;
		RR1[1] = #20000 1'b1;
		# 20000;
	end
	RR1[1] = 1'b0;
	RR1[1] = #30000 1'b1;
	# 20000;
	repeat(17)
	begin
		RR1[1] = 1'b0;
		RR1[1] = #20000 1'b1;
		# 20000;
	end
	RR1[1] = 1'b0;
	RR1[1] = #20000 1'b1;
end 
// RR1[ 0 ]
initial
begin
	RR1[0] = 1'bX;
	RR1[0] = #10000 1'b0;
	RR1[0] = #10000 1'b1;
	RR1[0] = #10000 1'b0;
	RR1[0] = #10000 1'bX;
	RR1[0] = #80000 1'b0;
	# 10000;
	repeat(5)
	begin
		RR1[0] = 1'b1;
		RR1[0] = #10000 1'b0;
		# 10000;
	end
	RR1[0] = 1'b1;
	RR1[0] = #10000 1'b0;
	RR1[0] = #20000 1'b1;
	RR1[0] = #10000 1'b0;
	# 10000;
	repeat(36)
	begin
		RR1[0] = 1'b1;
		RR1[0] = #10000 1'b0;
		# 10000;
	end
end 
// RR2[ 4 ]
initial
begin
	RR2[4] = 1'bX;
	RR2[4] = #10000 1'b0;
	RR2[4] = #20000 1'bX;
	RR2[4] = #90000 1'b0;
	RR2[4] = #100000 1'b1;
	RR2[4] = #50000 1'b0;
	RR2[4] = #160000 1'b1;
	RR2[4] = #160000 1'b0;
	RR2[4] = #160000 1'b1;
	RR2[4] = #160000 1'b0;
end 
// RR2[ 3 ]
initial
begin
	RR2[3] = 1'bX;
	RR2[3] = #10000 1'b0;
	RR2[3] = #20000 1'bX;
	RR2[3] = #90000 1'b0;
	RR2[3] = #20000 1'b1;
	RR2[3] = #80000 1'b0;
	RR2[3] = #30000 1'b1;
	RR2[3] = #20000 1'b0;
	# 80000;
	repeat(4)
	begin
		RR2[3] = 1'b1;
		RR2[3] = #80000 1'b0;
		# 80000;
	end
	RR2[3] = 1'b1;
end 
// RR2[ 2 ]
initial
begin
	RR2[2] = 1'bX;
	RR2[2] = #10000 1'b0;
	RR2[2] = #20000 1'bX;
	RR2[2] = #90000 1'b1;
	RR2[2] = #20000 1'b0;
	RR2[2] = #40000 1'b1;
	RR2[2] = #40000 1'b0;
	RR2[2] = #30000 1'b1;
	RR2[2] = #20000 1'b0;
	RR2[2] = #40000 1'b1;
	# 40000;
	repeat(8)
	begin
		RR2[2] = 1'b0;
		RR2[2] = #40000 1'b1;
		# 40000;
	end
	RR2[2] = 1'b0;
end 
// RR2[ 1 ]
initial
begin
	RR2[1] = 1'bX;
	RR2[1] = #10000 1'b0;
	RR2[1] = #20000 1'bX;
	RR2[1] = #90000 1'b1;
	RR2[1] = #20000 1'b0;
	# 20000;
	repeat(2)
	begin
		RR2[1] = 1'b1;
		RR2[1] = #20000 1'b0;
		# 20000;
	end
	RR2[1] = 1'b1;
	RR2[1] = #30000 1'b0;
	# 20000;
	repeat(17)
	begin
		RR2[1] = 1'b1;
		RR2[1] = #20000 1'b0;
		# 20000;
	end
	RR2[1] = 1'b1;
	RR2[1] = #20000 1'b0;
end 
// RR2[ 0 ]
initial
begin
	RR2[0] = 1'bX;
	RR2[0] = #10000 1'b0;
	RR2[0] = #10000 1'b1;
	RR2[0] = #10000 1'bX;
	RR2[0] = #90000 1'b0;
	# 10000;
	repeat(5)
	begin
		RR2[0] = 1'b1;
		RR2[0] = #10000 1'b0;
		# 10000;
	end
	RR2[0] = 1'b1;
	RR2[0] = #10000 1'b0;
	RR2[0] = #20000 1'b1;
	RR2[0] = #10000 1'b0;
	# 10000;
	repeat(36)
	begin
		RR2[0] = 1'b1;
		RR2[0] = #10000 1'b0;
		# 10000;
	end
end 
// WR[ 4 ]
initial
begin
	WR[4] = 1'b0;
	WR[4] = #30000 1'bX;
	WR[4] = #90000 1'b0;
	WR[4] = #120000 1'b1;
	WR[4] = #80000 1'b0;
	WR[4] = #160000 1'b1;
	WR[4] = #160000 1'b0;
	WR[4] = #160000 1'b1;
	WR[4] = #160000 1'b0;
end 
// WR[ 3 ]
initial
begin
	WR[3] = 1'b0;
	WR[3] = #30000 1'bX;
	WR[3] = #90000 1'b0;
	WR[3] = #70000 1'b1;
	WR[3] = #130000 1'b0;
	WR[3] = #80000 1'b1;
	# 80000;
	repeat(3)
	begin
		WR[3] = 1'b0;
		WR[3] = #80000 1'b1;
		# 80000;
	end
	WR[3] = 1'b0;
end 
// WR[ 2 ]
initial
begin
	WR[2] = 1'b0;
	WR[2] = #30000 1'bX;
	WR[2] = #90000 1'b0;
	WR[2] = #30000 1'b1;
	WR[2] = #40000 1'b0;
	WR[2] = #40000 1'b1;
	WR[2] = #10000 1'b0;
	WR[2] = #40000 1'b1;
	# 40000;
	repeat(8)
	begin
		WR[2] = 1'b0;
		WR[2] = #40000 1'b1;
		# 40000;
	end
	WR[2] = 1'b0;
end 
// WR[ 1 ]
initial
begin
	WR[1] = 1'b0;
	WR[1] = #20000 1'b1;
	WR[1] = #10000 1'bX;
	WR[1] = #90000 1'b0;
	WR[1] = #10000 1'b1;
	# 20000;
	repeat(2)
	begin
		WR[1] = 1'b0;
		WR[1] = #20000 1'b1;
		# 20000;
	end
	WR[1] = 1'b0;
	WR[1] = #30000 1'b1;
	# 20000;
	repeat(18)
	begin
		WR[1] = 1'b0;
		WR[1] = #20000 1'b1;
		# 20000;
	end
end 
// WR[ 0 ]
initial
begin
	WR[0] = 1'b0;
	WR[0] = #10000 1'b1;
	WR[0] = #10000 1'b0;
	WR[0] = #10000 1'bX;
	WR[0] = #90000 1'b1;
	# 10000;
	repeat(5)
	begin
		WR[0] = 1'b0;
		WR[0] = #10000 1'b1;
		# 10000;
	end
	WR[0] = 1'b0;
	WR[0] = #20000 1'b1;
	# 10000;
	repeat(37)
	begin
		WR[0] = 1'b0;
		WR[0] = #10000 1'b1;
		# 10000;
	end
end 
// WD[ 31 ]
initial
begin
	WD[31] = 1'b0;
	WD[31] = #30000 1'bX;
	WD[31] = #90000 1'b0;
end 
// WD[ 30 ]
initial
begin
	WD[30] = 1'b0;
	WD[30] = #30000 1'bX;
	WD[30] = #90000 1'b0;
end 
// WD[ 29 ]
initial
begin
	WD[29] = 1'b0;
	WD[29] = #30000 1'bX;
	WD[29] = #90000 1'b0;
end 
// WD[ 28 ]
initial
begin
	WD[28] = 1'b0;
	WD[28] = #30000 1'bX;
	WD[28] = #90000 1'b0;
end 
// WD[ 27 ]
initial
begin
	WD[27] = 1'b0;
	WD[27] = #30000 1'bX;
	WD[27] = #90000 1'b0;
end 
// WD[ 26 ]
initial
begin
	WD[26] = 1'b0;
	WD[26] = #30000 1'bX;
	WD[26] = #90000 1'b0;
end 
// WD[ 25 ]
initial
begin
	WD[25] = 1'b0;
	WD[25] = #30000 1'bX;
	WD[25] = #90000 1'b0;
end 
// WD[ 24 ]
initial
begin
	WD[24] = 1'b0;
	WD[24] = #30000 1'bX;
	WD[24] = #90000 1'b0;
end 
// WD[ 23 ]
initial
begin
	WD[23] = 1'b0;
	WD[23] = #30000 1'bX;
	WD[23] = #90000 1'b0;
end 
// WD[ 22 ]
initial
begin
	WD[22] = 1'b0;
	WD[22] = #30000 1'bX;
	WD[22] = #90000 1'b0;
end 
// WD[ 21 ]
initial
begin
	WD[21] = 1'b0;
	WD[21] = #30000 1'bX;
	WD[21] = #90000 1'b0;
end 
// WD[ 20 ]
initial
begin
	WD[20] = 1'b0;
	WD[20] = #30000 1'bX;
	WD[20] = #90000 1'b0;
end 
// WD[ 19 ]
initial
begin
	WD[19] = 1'b0;
	WD[19] = #30000 1'bX;
	WD[19] = #90000 1'b0;
end 
// WD[ 18 ]
initial
begin
	WD[18] = 1'b0;
	WD[18] = #30000 1'bX;
	WD[18] = #90000 1'b0;
end 
// WD[ 17 ]
initial
begin
	WD[17] = 1'b0;
	WD[17] = #30000 1'bX;
	WD[17] = #90000 1'b0;
end 
// WD[ 16 ]
initial
begin
	WD[16] = 1'b0;
	WD[16] = #30000 1'bX;
	WD[16] = #90000 1'b0;
end 
// WD[ 15 ]
initial
begin
	WD[15] = 1'b0;
	WD[15] = #30000 1'bX;
	WD[15] = #90000 1'b0;
end 
// WD[ 14 ]
initial
begin
	WD[14] = 1'b0;
	WD[14] = #30000 1'bX;
	WD[14] = #90000 1'b0;
end 
// WD[ 13 ]
initial
begin
	WD[13] = 1'b0;
	WD[13] = #30000 1'bX;
	WD[13] = #90000 1'b0;
end 
// WD[ 12 ]
initial
begin
	WD[12] = 1'b0;
	WD[12] = #30000 1'bX;
	WD[12] = #90000 1'b0;
end 
// WD[ 11 ]
initial
begin
	WD[11] = 1'b0;
	WD[11] = #30000 1'bX;
	WD[11] = #90000 1'b0;
end 
// WD[ 10 ]
initial
begin
	WD[10] = 1'b0;
	WD[10] = #30000 1'bX;
	WD[10] = #90000 1'b0;
end 
// WD[ 9 ]
initial
begin
	WD[9] = 1'b0;
	WD[9] = #30000 1'bX;
	WD[9] = #90000 1'b0;
end 
// WD[ 8 ]
initial
begin
	WD[8] = 1'b0;
	WD[8] = #30000 1'bX;
	WD[8] = #90000 1'b0;
end 
// WD[ 7 ]
initial
begin
	WD[7] = 1'b0;
	WD[7] = #30000 1'bX;
	WD[7] = #90000 1'b0;
	WD[7] = #620000 1'b1;
end 
// WD[ 6 ]
initial
begin
	WD[6] = 1'b0;
	WD[6] = #30000 1'bX;
	WD[6] = #90000 1'b1;
	WD[6] = #620000 1'b0;
end 
// WD[ 5 ]
initial
begin
	WD[5] = 1'b1;
	WD[5] = #10000 1'b0;
	WD[5] = #10000 1'b1;
	WD[5] = #10000 1'bX;
	WD[5] = #90000 1'b0;
	WD[5] = #300000 1'b1;
	WD[5] = #320000 1'b0;
end 
// WD[ 4 ]
initial
begin
	WD[4] = 1'b1;
	WD[4] = #30000 1'bX;
	WD[4] = #90000 1'b0;
	WD[4] = #140000 1'b1;
	WD[4] = #160000 1'b0;
	WD[4] = #160000 1'b1;
	WD[4] = #160000 1'b0;
	WD[4] = #160000 1'b1;
end 
// WD[ 3 ]
initial
begin
	WD[3] = 1'b0;
	WD[3] = #20000 1'b1;
	WD[3] = #10000 1'bX;
	WD[3] = #90000 1'b0;
	WD[3] = #60000 1'b1;
	WD[3] = #80000 1'b0;
	# 80000;
	repeat(4)
	begin
		WD[3] = 1'b1;
		WD[3] = #80000 1'b0;
		# 80000;
	end
	WD[3] = 1'b1;
end 
// WD[ 2 ]
initial
begin
	WD[2] = 1'b1;
	WD[2] = #20000 1'b0;
	WD[2] = #10000 1'bX;
	WD[2] = #90000 1'b0;
	WD[2] = #20000 1'b1;
	# 40000;
	repeat(10)
	begin
		WD[2] = 1'b0;
		WD[2] = #40000 1'b1;
		# 40000;
	end
	WD[2] = 1'b0;
end 
// WD[ 1 ]
initial
begin
	WD[1] = 1'b1;
	WD[1] = #20000 1'b0;
	WD[1] = #10000 1'bX;
	WD[1] = #90000 1'b1;
	WD[1] = #20000 1'b0;
	# 20000;
	repeat(21)
	begin
		WD[1] = 1'b1;
		WD[1] = #20000 1'b0;
		# 20000;
	end
end 
// WD[ 0 ]
initial
begin
	WD[0] = 1'b0;
	WD[0] = #10000 1'b1;
	WD[0] = #10000 1'b0;
	WD[0] = #10000 1'bX;
	WD[0] = #90000 1'b0;
	WD[0] = #10000 1'b1;
	# 10000;
	repeat(43)
	begin
		WD[0] = 1'b0;
		WD[0] = #10000 1'b1;
		# 10000;
	end
end 

Register_vlg_sample_tst tb_sample (
	.RR1(RR1),
	.RR2(RR2),
	.RegWrite(RegWrite),
	.WD(WD),
	.WR(WR),
	.clk(clk),
	.sampler_tx(sampler)
);

Register_vlg_check_tst tb_out(
	.RD1(RD1),
	.RD2(RD2),
	.sampler_rx(sampler)
);
endmodule

